{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let keyLockRecipient = "_lr" # Lock recipient 32-byte
let keyLockAmount = "_la" # Lock amount Int
let keyLockDestination = "_ld" # Lock destination 4-byte
let keyLockAssetSource = "_las"  # Lock token source and address 36-byte

let keyVersion = "_v"   # Binary version number
let keyBridge = "_b"    # Bridge contract address, only bridge can call validator
let keyOracle = "_o"    # 64-byte oracle pubkey
let keyAdmin = "_a"     # Admin address
let keyUnlock = "_u"    # Unlock

let errUnauthorized = "unauthorized"
let errUninitialized = "uninitialized"
let errInvalidSignature = "invalid signature"
let errAlreadyClaimed = "claimed"
let errAlreadyLocked = "locked"
let errInvalidLockId = "invalid lockId"

let chainWaves = "V0FWRQ==" # 0x57415645


func assertCaller(i: Invocation, key: String) = {
    match getBinary(key) {
        case authority: ByteVector => if (authority != i.caller.bytes) 
            then throw(errUnauthorized) 
            else unit
        case _ => throw(errUninitialized)
    }
}
func assertCallerIsContract(i: Invocation) = {
   if (this.bytes != i.caller.bytes)
        then throw(errUnauthorized)
        else unit
}

func assertCallerIsBridge(i: Invocation) = assertCaller(i, keyBridge)
func assertCallerIsAdmin(i: Invocation) = assertCaller(i, keyAdmin)


func assertValidLockId(lockId: ByteVector) = {
    let version = getBinary(keyVersion).valueOrErrorMessage(errUninitialized)
    if (lockId.size() != 16 || lockId.take(1) != version) 
        then throw(errInvalidLockId)
        else unit
}

func assertLockNotExists(lockRecipientKey: String) = {
    match (getBinary(lockRecipientKey)) {
        case t: ByteVector => throw(errAlreadyLocked)
        case _ => unit
    }
}

@Callable(i)
func init(admin: String, version: ByteVector, bridge: String, oracle: ByteVector) = {
    strict callerCheck = i.assertCallerIsContract()
    if (getBinary(keyAdmin).isDefined())  # Can be called only once
        then throw(errUnauthorized) 
        else [
            BinaryEntry(keyVersion, version),
            BinaryEntry(keyBridge, bridge.addressFromStringValue().bytes),
            BinaryEntry(keyOracle, oracle),
            BinaryEntry(keyAdmin, admin.addressFromStringValue().bytes)
        ]
}

@Callable(i)
func createUnlock(
    lockId: ByteVector,
    recipient: ByteVector,
    amount: Int,
    lockSource: ByteVector,
    tokenSourceAndAddress: ByteVector,
    signature: ByteVector
) = {    
    strict checkLockId = assertValidLockId(lockId)
    # Check caller, must be bridge contract
    strict checkCaller = assertCallerIsBridge(i)
    # Check if unlock was already created
    let lockIdStr = lockId.toBase64String();
    let lockSourceStr = lockSource.toBase64String();
    let unlockKey = lockSourceStr + "_" + lockIdStr + keyUnlock
    if (getBoolean(unlockKey).isDefined())
        then throw(errAlreadyClaimed)
        else

    # Construct message
    let message = [
        lockIdStr,
        recipient.toBase64String(),
        amount.toString(),
        lockSourceStr,
        tokenSourceAndAddress.toBase64String(),
        chainWaves
    ].makeString("_")
    
    # Check signature
    let hash = message.toBytes().keccak256()
    
    let recoveredKey = ecrecover(hash, signature)
    if (recoveredKey != getBinaryValue(keyOracle))
        then throw(errInvalidSignature)
        else {
            # Save unlock
            ([BooleanEntry(unlockKey, true)], true)
        }
}


@Callable(i)
func createLock(
    lockId: ByteVector,
    recipient: ByteVector,
    amount: Int,
    lockDestination: ByteVector,
    assetSourceAndAddress: ByteVector
) = {
    let lockIdStr = lockId.toBase64String()
    let lockRecipientKey = lockIdStr + keyLockRecipient
    strict checkCaller = assertCallerIsBridge(i)
    strict checkLockId = assertValidLockId(lockId)
    strict checkLock = assertLockNotExists(lockRecipientKey)

    [
        BinaryEntry(lockIdStr + keyLockRecipient, recipient),
        IntegerEntry(lockIdStr + keyLockAmount, amount),
        BinaryEntry(lockIdStr + keyLockDestination, lockDestination),
        BinaryEntry(lockIdStr + keyLockAssetSource, assetSourceAndAddress)
    ]
}

@Callable(i)
func setAdmin(newAdmin: String) = {
    strict checkCaller = assertCallerIsAdmin(i)
    [BinaryEntry(keyAdmin, newAdmin.addressFromStringValue().bytes)]
}

@Callable(i)
func setOracle(newOracle: String) = {
    strict checkCaller = assertCallerIsAdmin(i)
    [BinaryEntry(keyOracle, newOracle.addressFromStringValue().bytes)]
}

@Callable(i)
func setBridge(newBridge: String) = {
    strict checkCaller = assertCallerIsAdmin(i)
    [BinaryEntry(keyBridge, newBridge.addressFromStringValue().bytes)]
}
