{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let keyAssetAddress = "_aa"
let keyAssetType = "_at"
let keyAssetPrecision = "_ap"
let keyAssetMinFee = "_amf"
let keyAssetIsActive = "_aia"

let keyBaseFeeRateBP = "_bfr"

let keyValidator = "_v"
let keyFeeCollector = "_fc"
let keyUnlockSigner = "_us"
let keyIsActive = "_ia"
let keyManager = "_m"

let BRIDGE_MANAGER = "BRIDGE_MANAGER"
let ASSET_MANAGER = "ASSET_MANAGER"
let STOP_MANAGER = "STOP_MANAGER"

let baseAssetSourceAndAddress = base64'V0FWRVdBVkUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'   # 0x57415645 5741564500000000000000000000000000000000000000000000000000000000
let baseAssetId = base64'V0FWRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=' # 0x5741564500000000000000000000000000000000000000000000000000000000

let chainWaves = base64'V0FWRQ==' # 0x57415645

let BP = 10000
let systemPrecision = 9

let errUnauthorized = "unauthorized"
let errUninitialized = "uninitialized"
let errInitialized = "initialized"
let errAlreadyExists = "exists"
let errNotExists = "not exists"
let errInvalidValues = "invalid values"
let errNotOnePayment = "not one payment"
let errAssetNotFound = "asset not found"
let errNotEnoughBalance = "not enough balance"
let errBigPowValue = "pow value too big"
let errBridgeDisabled = "birdge is disabled"
let errAssetDisabled = "asset is disabled"
let errWrongDestinationChain = "wrong destination chain"

let typeBase = 0
let typeNative = 1
let typeWrapped = 2

func assertCallerIsManager(i: Invocation, managerType: String) = {
    match getBinary(managerType + keyManager) {
        case authority: ByteVector => if (authority != i.caller.bytes) 
            then throw(errUnauthorized) 
            else unit
        case _ => throw(errUninitialized)
    }
}

func assertBridgeIsActive() = {
    if (!getBoolean(keyIsActive).valueOrElse(false)) 
        then throw(errBridgeDisabled)
        else unit
}

func assertAssetIsActive(assetIdStr: String) = {
    match getBoolean(assetIdStr + keyAssetIsActive) {
        case isActive: Boolean => if (isActive) 
            then unit
            else throw(errAssetDisabled)
        case _ => throw(errAssetNotFound)
    }
}

func getFee(amount: Int, assetIdStr: String) = {
    let baseFeeRateBP = getInteger(keyBaseFeeRateBP).valueOrErrorMessage(errUninitialized)
    let minFee = getInteger(assetIdStr + keyAssetMinFee).valueOrErrorMessage(errAssetNotFound)
    let fee = amount * baseFeeRateBP / BP
    if (fee < minFee) then minFee else fee
}

func pow10(value: Int, power: Int) = {
    let absPow = if (power < 0) then -power else power
    let powerValue = if (absPow == 0) then 1
    else if (absPow == 1) then 10
    else if (absPow == 2) then 100
    else if (absPow == 3) then 1000
    else if (absPow == 4) then 10000
    else if (absPow == 5) then 100000
    else if (absPow == 6) then 1000000
    else if (absPow == 7) then 10000000
    else if (absPow == 8) then 100000000
    else if (absPow == 9) then 1000000000
    else throw(errBigPowValue)

    if (power) < 0 then value / powerValue else value * powerValue
}

func toSystemPrecision(amount: Int, precision: Int) = {
    pow10(amount, systemPrecision - precision)
}

func fromSystemPrecision(amount: Int, precision: Int) = {
        pow10(amount, precision - systemPrecision)
}

@Callable(i)
func setConfig(admin: ByteVector, validatorAddress: ByteVector, feeCollector: ByteVector, unlockSigner: ByteVector, baseFeeRateBP: Int) = {
    # Can be called only once
    if (getBinary(BRIDGE_MANAGER + keyManager).isDefined())
        then throw(errInitialized)
        else 

    [
        BinaryEntry(BRIDGE_MANAGER + keyManager, admin),
        BinaryEntry(keyValidator, validatorAddress),
        BinaryEntry(keyFeeCollector, feeCollector),
        BinaryEntry(keyUnlockSigner, unlockSigner),
        IntegerEntry(keyBaseFeeRateBP, baseFeeRateBP),
        BooleanEntry(keyIsActive, true)
    ]
}

@Callable(i)
func addAsset(
    assetSourceAndAddress: ByteVector,  # First 4 bytes are token source, then up to 32 byte address
    assetIdArg: ByteVector,
    type: Int,
    name: String, # Only required if creating wrapped tokens
    description: String, # Only required if creating wrapped tokens
    precision: Int,
    minFee: Int) = {

    strict callerCheck = i.assertCallerIsManager(ASSET_MANAGER)

    let (actions, assetId) = if (type == typeBase) then {
        # Check values for the base coin
        if (assetSourceAndAddress != baseAssetSourceAndAddress || assetIdArg != baseAssetId || precision != 8) 
            then throw(errInvalidValues)
            else ([], assetIdArg)
    } else if (type == typeNative) then {
        # Just return supplied value if native
        ([], assetIdArg)
    } else if (type == typeWrapped) then {
        # Issue new token only if no asset ID is supplied
        if (assetIdArg.size() == 0)
            then {
                let issue = Issue(name, description, 0, precision, true)
                ([issue], calculateAssetId(issue))
            } 
            else ([], assetIdArg)
    } else throw(errInvalidValues)
    
    let assetIdStr = toBase64String(assetId)

    let keySourceAddress = assetSourceAndAddress.toBase64String() + keyAssetAddress
    let keyNativeAddress = assetIdStr + keyAssetAddress
    if (getBinary(keySourceAddress).isDefined() || getBinary(keyNativeAddress).isDefined())
        then throw(errAlreadyExists)
        else actions ++ [
            BinaryEntry(keySourceAddress, assetId),
            BinaryEntry(keyNativeAddress, assetSourceAndAddress),
            IntegerEntry(assetIdStr + keyAssetType, type),
            IntegerEntry(assetIdStr + keyAssetPrecision, precision),
            IntegerEntry(assetIdStr + keyAssetMinFee, minFee),
            BooleanEntry(assetIdStr + keyAssetIsActive, true)
        ]
}

@Callable(i)
func removeAsset(
    assetSourceAndAddress: ByteVector,  # First 4 bytes are token source, then up to 32 byte address
    newAuthority: ByteVector
) = {
    strict callerCheck = i.assertCallerIsManager(ASSET_MANAGER)

    let keySourceAddress = assetSourceAndAddress.toBase64String() + keyAssetAddress
    let assetId = getBinary(keySourceAddress).valueOrErrorMessage(errNotExists)
    let assetIdStr = toBase64String(assetId)
    let type = getInteger(assetIdStr + keyAssetType).valueOrErrorMessage(errNotExists)

    let actions = if (type == typeBase) then {
        # Transfer all WAVES to ne authority
        let balance = wavesBalance(this)
        if (balance.available > 0)
            then [ScriptTransfer(Address(newAuthority), balance.available, unit)]
            else []
    } else if (type == typeNative) then {
        # Transfer all assets to new authority
        let balance = assetBalance(this, assetId)
        if (balance > 0) 
            then [ScriptTransfer(Address(newAuthority), balance, assetId)]
            else []
    } else if (type == typeWrapped) then {
        # Chenge asset issuer
        []
    } else throw(errInvalidValues)
    
    actions ++ [
        DeleteEntry(keySourceAddress),
        DeleteEntry(assetIdStr + keyAssetAddress),
        DeleteEntry(assetIdStr + keyAssetType),
        DeleteEntry(assetIdStr + keyAssetPrecision),
        DeleteEntry(assetIdStr + keyAssetMinFee),
        DeleteEntry(assetIdStr + keyAssetIsActive)
    ]
}

@Callable(i)
func lock(lockId: ByteVector, recipient: ByteVector, destination: ByteVector) = {
    strict birdgeCheck = assertBridgeIsActive()

    if (destination == chainWaves) 
        then throw(errWrongDestinationChain)
        else 
    
    if (i.payments.size() != 1) 
        then throw(errNotOnePayment) 
        else 
    let assetId = valueOrElse(i.payments[0].assetId, baseAssetId)
    let assetIdStr = assetId.toBase64String()

    strict assetCheck = assertAssetIsActive(assetIdStr)

    let amount = i.payments[0].amount
    let validatorAddress = getBinary(keyValidator).valueOrErrorMessage(errUninitialized)
    let fee = getFee(amount, assetIdStr)
    let amountWithoutFee = amount - fee;
    if (amountWithoutFee <= 0) then {
        throw(errNotEnoughBalance)
    } else

    let assetSourceAndAddress = getBinary(assetIdStr + keyAssetAddress).valueOrErrorMessage(errAssetNotFound)
    let type = getInteger(assetIdStr + keyAssetType).valueOrErrorMessage(errAssetNotFound)
    let precision = getInteger(assetIdStr + keyAssetPrecision).valueOrErrorMessage(errAssetNotFound)
    let feeCollector = getBinary(keyFeeCollector).valueOrErrorMessage(errUninitialized)

    strict createLock = invoke(Address(validatorAddress), "createLock", [
        lockId, 
        recipient, 
        amountWithoutFee.toSystemPrecision(precision), 
        destination, 
        assetSourceAndAddress], [])

    if (type == typeBase) then {
        [ScriptTransfer(Address(feeCollector), fee, unit)]
    } else if (type == typeNative) then {
        [ScriptTransfer(Address(feeCollector), fee, assetId)]
    } else if (type == typeWrapped) then {
        [
            Burn(assetId, amountWithoutFee),
            ScriptTransfer(Address(feeCollector), fee, assetId)
        ]   
    } else throw(errInvalidValues)
}

@Callable(i)
func unlock(lockId: ByteVector,
    recipient: ByteVector,
    amount: Int,
    lockSource: ByteVector,
    assetSourceAndAddress: ByteVector,
    signature: ByteVector) = {

    strict birdgeCheck = assertBridgeIsActive()

    let assetId = getBinary(assetSourceAndAddress.toBase64String() + keyAssetAddress).valueOrErrorMessage(errAssetNotFound)
    let assetIdStr = assetId.toBase64String()
    let type = getInteger(assetIdStr + keyAssetType).valueOrErrorMessage(errAssetNotFound)
    let precision = getInteger(assetIdStr + keyAssetPrecision).valueOrErrorMessage(errAssetNotFound)
    let validatorAddress = getBinary(keyValidator).valueOrErrorMessage(errUninitialized)
    let unlockSigner = getBinary(keyUnlockSigner).valueOrErrorMessage(errUninitialized)
    let feeCollector = getBinary(keyFeeCollector).valueOrErrorMessage(errUninitialized)

    strict createUnlock = invoke(Address(validatorAddress), "createUnlock", [
        lockId, 
        recipient, 
        amount, 
        lockSource, 
        assetSourceAndAddress, 
        signature], [])

    let isValid = match (createUnlock) {
        case v:Boolean => v
        case _ => false
        }
    if (!isValid) then {
        throw(errInvalidValues)
    } else 

    let fee = if (unlockSigner == i.caller.bytes) 
        then getInteger(assetIdStr + keyAssetMinFee).valueOrErrorMessage(errAssetNotFound)
        else 0
    let amountToSend = amount.fromSystemPrecision(precision);
    let amountToSendWithoutFee = amountToSend - fee;
    if (amountToSendWithoutFee <= 0) then {
        throw(errNotEnoughBalance)
    } else

    if (type == typeBase) then {
        [ScriptTransfer(Address(recipient), amountToSendWithoutFee, unit)] ++
        if (fee > 0) then [ScriptTransfer(Address(feeCollector), fee, unit)] else []
    } else if (type == typeNative) then {
        [ScriptTransfer(Address(recipient), amountToSendWithoutFee, assetId)] ++
        if (fee > 0) then [ScriptTransfer(Address(feeCollector), fee, assetId)] else []
    } else if (type == typeWrapped) then {
        [
            Reissue(assetId, amountToSend, true),
            ScriptTransfer(Address(recipient), amountToSendWithoutFee, assetId)
        ] ++
        if (fee > 0) then [ScriptTransfer(Address(feeCollector), fee, assetId)] else []
    } else throw(errInvalidValues)
}

@Callable(i)
func setManager(managerType: String, manager: ByteVector) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    [BinaryEntry(managerType + keyManager, manager)]
}

@Callable(i)
func setFeeCollector(feeCollector: ByteVector) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    [BinaryEntry(keyFeeCollector, feeCollector)]
}

@Callable(i)
func setValidator(validator: ByteVector) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    [BinaryEntry(keyValidator, validator)]
}

@Callable(i)
func startBridge() = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    [BooleanEntry(keyIsActive, true)]
}

@Callable(i)
func stopBridge() = {
    strict callerCheck = i.assertCallerIsManager(STOP_MANAGER)
    [BooleanEntry(keyIsActive, false)]
}

@Callable(i)
func setMinFee(assetId: ByteVector, minFee: Int) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    let assetIdStr = assetId.toBase64String()
    [IntegerEntry(assetIdStr + keyAssetMinFee, minFee)]
}

@Callable(i)
func setBaseFeeRate(baseFeeRateBP: Int) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    [IntegerEntry(keyBaseFeeRateBP, baseFeeRateBP)]
}

@Callable(i)
func setAssetState(assetId: ByteVector, state: Boolean) = {
    strict callerCheck = i.assertCallerIsManager(BRIDGE_MANAGER)
    let assetIdStr = assetId.toBase64String()
    [BooleanEntry(assetIdStr + keyAssetIsActive, state)]
}